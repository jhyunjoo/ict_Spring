	VMWare => 삭제해도 됨
	
	pom.xml에 추가
	<!-- jdbc , 오류 나신분들만 추가  -->
	<!-- Cannot load JDBC driver class 'oracle.jdbc.driver.OracleDriver' 오류 --> 
	<dependency> <groupId>com.oracle.database.jdbc</groupId>
     <artifactId>ojdbc6</artifactId> 
     <version>11.2.0.4</version> 
   </dependency>
      
   <dependency> 
         <groupId>commons-dbcp</groupId>
         <artifactId>commons-dbcp</artifactId>
         <version>1.4</version>
    </dependency>
	<!-- jdbc -->

/////////////[ 스프링 환경 설정 ] ///////////////////////

1. 커넥션풀 추가 - Servers > context.xml

 <Resource 
	    author="Container" 
	    driverClassName="oracle.jdbc.driver.OracleDriver" 
	    maxActive="7" 
	    maxWait="1000" 
	    name="jdbc/mybatis_ict05" 
	    username="mybatis_ict05"
	    password="tiger" 
	    type="javax.sql.DataSource" 
	    url="jdbc:oracle:thin:@localhost:1521:xe" 
	    />       
    
  
 [ 계정생성 ] 
-- System 계정에서 실행
-- 2. 계정생성(mybatis_ict05) 및 테이블생성
--******************* 일반 계정 생성 =>[시스템계정(System)에서 작업 ***********
--- 1. 계정생성
-- create user <계정이름> identified by <계정암호> default tablespace users;
   create user mybatis_ict05 identified by tiger default tablespace users;
-- 2. 사용자 권한 부여
   grant connect, resource to mybatis_ict05;
   grant create view to mybatis_ict05;
   
--  grant connect, resource,create view to mybatis_ict05;   
-- 3. 락 해제
-- alter user <계정이름> account unlock;
    alter user mybatis_ict05 account unlock;

-- 실행결과   
--User SCOTT이(가) 생성되었습니다.
--Grant을(를) 성공했습니다.
--User SCOTT이(가) 변경되었습니다.

-- (+) 계정연결
     
-----------------------------------------------------     
2. 플젝 생성 : NEW > Spring Legacy Project > 프로젝트명 입력 > Spring MVC Project 선택 > 패키지(3레벨이상) 입력 : spring_mvcMybatis_ict05
  => 패키지(3레벨이상) 입력해야 하며, 3레벨이 컨텍스트명(mvc_mybatis)이 된다. 
  
=> 테스트 => http://localhost/
	home.jsp 실행
	Hello world!

1) 자바 설정
	
	- project 우클릭 > properties > Project Facets > java를 11로 변경
	Runtimes 탭에서 Apache Tomcat v9.0 클릭 > Apply 버튼
	
	- project 우클릭 > properties > Java Build Path > Library 탭 > jre System library 선택후 Edit 선택 / 또는 jre System library 더블클릭
	> 세번째 workspace default JRE(jre1.11.0_xxx) 선택
	
	- java compiler - 11 버전 확인
	
	[Apply AND Close] 클릭
	
2) pom.xml에 버전 반영
	<properties>
		<java-version>11</java-version>
		<org.springframework-version>5.3.24</org.springframework-version>		
		
3) 실행 : 
	http://localhost/mvc_mybatis/
	=> http://localhost/세번째 패키지명/
	
-----------------------------------------------------	
3. 패키지 생성

com.spring.mvc_mybatis.ch01.dto
com.spring.mvc_mybatis.ch01.service
com.spring.mvc_mybatis.controller
com.spring.mvc_mybatis.ch01.dao

-----------------------------------------------------	
4-1. web.xml 맨 아래에 한글 안깨지도록 추가

	<!-- 한글 안깨지게 처리 시작 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>	
		
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 한글 안깨지게 처리 종료 -->
	
</web-app>

확인 => http://localhost/mvc_mybatis/
	Hello world!
	The time on the server is 2025년 1월 17일 오전 11시 3분 41초 KST.
	
4-2. web.xml에 추가
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
		            /WEB-INF/spring/root-context.xml
					classpath:/dataSource-config.xml		
		</param-value>
	</context-param>
	
-----------------------------------------------------	
5. pom.xml에 Mybatis.jar 파일 설정
   
   mvnrepository.com에서 4개의 라이브러리를 검색해서 복사후 pom.xml에 등록하면
   maven 중앙 repository(저장소)로부터 다운로드 후 빌드되어 Maven Dependencies(.m2.repository)에 저장된다.
   
 	<!-- Mybatis 설정 시작 -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>1.3.2</version>
	</dependency>
	
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.4.6</version>
	</dependency>
	
	<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>5.3.24</version>
	</dependency>
	<!-- Mybatis 설정 끝 -->


6. dataSource-config.xml 작성

src/main/resources/ 하위에 mappers 폴더 생성

src/main/resources  => test 패키지 아님

new > Spring Bean Configuration File > dataSource-config.xml 작성

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Mybatis 설정 시작 -->
	<!-- 컨넥션풀 -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/mybatis_ict05" />
		<property name="resourceRef" value="true" />
	</bean>
	
	<!-- Mybatis 파일 위치 지정, 컨넥션풀 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mappers/**/*.xml" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- Mybatis 설정 종료 -->
</beans>



** Controller, ServiceImpl, DAOImpl -> IocContainer에게 스프링 빈 생성 의뢰 
   => @Controller, @Service, @Repository 추가
   
** 각각의 메서드에 주소값 주입
   @Autowired
   private ServiceImpl service;
   
   @Autowired
   private DAOImpl dao;
   
   @Autowired
   private SqlSessionTemplate sqlSession;
 

7. 마이바티스 매퍼 파일 작성
	
		=> 1. 한두줄의 자바코드로 DB연동을 처리한다
		   2. SQL 명령어를 자바 코드에서 분리하여 XML 파일에 Mapper로 따로 관리
		   
	   - src/main/resources/에서 폴더 생성 : mappers 폴더 생성
	   - 그 폴더 우클릭 > new > other > xml file > sqlMapper1.xml 생성
	   
	   -  sqlMapper1.xml에 추가
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	  
	 <mapper namespace="com.spring.mvc_mybatis.ch01.dao.UserDAO_ch1">  <!-- namespace="패키지명.인터페이스" -->
	
	 </mapper> 
	********
	
/////////////////////////////////////////////////////////////////////
	
@Controller
public class MyBatisController {
	
	@Autowired
	private UserServiceImpl_ch1 service1;
	
}


------------------


@Service
public class UserServiceImpl_ch1 implements UserService_ch1 {

	@Autowired
	private UserDAOImpl_ch1 dao;
	
	@Override
	public void getAddressInfo_1(HttpServletRequest request, HttpServletResponse response, Model model)
			throws ServletException, IOException {
		System.out.println("서비스 - getAddressInfo_1");
	}

	@Override
	public void getAddressInfo_2(HttpServletRequest request, HttpServletResponse response, Model model)
			throws ServletException, IOException {
		System.out.println("서비스 - getAddressInfo_2");
	}

}


-------------------

@Repository
public class UserDAOImpl_ch1 implements UserDAO_ch1 {
	
	@Autowired
	private SqlSessionTemplate sqlSession;

	@Override
	public List<UserDTO> getAddressInfo_1() {
		System.out.println("DAO - getAddressInfo_1");
		
		return null;
	}

	@Override
	public List<UserDTO> getAddressInfo_2() {
		System.out.println("DAO - getAddressInfo_2");
		
		return null;
	}
	
}
	 
------------------	 
	
	
	HomeController.java 실행 => http://localhost/mvc_mybatis/    => home.jsp가 실행
	
	Hello world!
    
    
    => 오류시 Project > CLEAN


////////////////////////////////////////////


-- mybatis_ict05 계정에서 작업
-- mvc_user_tbl : mvc_address_tbl => 1 : 1
-- mvc_user_tbl : mvc_board_tbl => 1 : N

--1) mvc_user_tbl 생성
DROP TABLE mvc_user_tbl CASCADE CONSTRAINTS;
CREATE TABLE mvc_user_tbl(
	user_id 	NUMBER(2) PRIMARY KEY,
	user_name   VARCHAR2(30),
	reg_date    DATE
);

INSERT INTO mvc_user_tbl(user_id, user_name, reg_date)
 VALUES(1, 'john', sysdate);

INSERT INTO mvc_user_tbl(user_id, user_name, reg_date)
 VALUES(2, 'terry', sysdate);

COMMIT;

SELECT * FROM mvc_user_tbl;
--1	john	25/01/17
--2	terry	25/01/17

-- 2) mvc_address_tbl 생성
DROP TABLE mvc_address_tbl CASCADE CONSTRAINTS;
CREATE TABLE mvc_address_tbl(
	user_id 	 NUMBER(2),
	user_address VARCHAR2(50),
	CONSTRAINT mvc_address_tbl_user_id_fk FOREIGN KEY(user_id) REFERENCES mvc_user_tbl(user_id)
);

INSERT INTO mvc_address_tbl(user_id, user_address)
 VALUES(1, '서울시 금천구 가산동');

INSERT INTO mvc_address_tbl(user_id, user_address)
 VALUES(2, '서울시 강남구 대치동');

COMMIT;

SELECT * FROM mvc_address_tbl;
--1	서울시 금천구 가산동
--2	서울시 강남구 대치동

-- 3) mvc_board_tbl 생성
DROP TABLE mvc_board_tbl CASCADE CONSTRAINTS;
CREATE TABLE mvc_board_tbl(
	board_num    NUMBER(3) PRIMARY KEY,
	board_title  VARCHAR2(50),
	board_content VARCHAR2(100),
	user_id 	 NUMBER(2),
	CONSTRAINT mvc_board_tbl_user_id_fk FOREIGN KEY(user_id) REFERENCES mvc_user_tbl(user_id)
);

INSERT INTO mvc_board_tbl(board_num, board_title, board_content, user_id)
 VALUES(100, '자바', '반복문', 1);

INSERT INTO mvc_board_tbl(board_num, board_title, board_content, user_id)
 VALUES(101, 'JSP', 'mvc 기본', 1);
 
INSERT INTO mvc_board_tbl(board_num, board_title, board_content, user_id)
 VALUES(102, '스프링', 'mybatis 기본', 1);
 
INSERT INTO mvc_board_tbl(board_num, board_title, board_content, user_id)
 VALUES(103, 'JSP 응용', 'mvc 활용', 2);
 
INSERT INTO mvc_board_tbl(board_num, board_title, board_content, user_id)
 VALUES(104, '스프링', 'mybatis 활용', 2);

INSERT INTO mvc_board_tbl(board_num, board_title, board_content, user_id)
 VALUES(105, '플젝', '성취감', 2);
 
COMMIT;

SELECT * FROM mvc_board_tbl;


--100	자바	반복문	1
--101	JSP	mvc 기본	1
--102	스프링	mybatis 기본	1
--103	JSP 응용	mvc 활용	2
--104	스프링	mybatis 활용	2
--105	플젝	성취감	2

////////////////////////////////////////////

SELECT u.user_id, 
       u.user_name, 
       u.reg_date,  
       a.user_address
  FROM mvc_user_tbl u
     , mvc_address_tbl a
 WHERE u.user_id = a.user_id
 ORDER BY u.user_id ASC;

SELECT board_num boardNum
     , board_title boardTitle
     , board_content boardContent
  FROM mvc_board_tbl
 WHERE user_id = 2;
 
UPDATE  mvc_board_tbl
  SET   board_title='스프링부트'
      , board_content='스프링부트 활용'
 where board_num = 102;
 COMMIT;
 ROLLBACK;
 
-- user, board 
 SELECT u.user_id, 
       u.user_name, 
       u.reg_date,  
       b.board_num,
       b.board_title,
       b.board_content
  FROM mvc_user_tbl u
     , mvc_board_tbl b
 WHERE u.user_id = b.user_id
 ORDER BY u.user_id ASC;

SELECT u.user_id, 
       u.user_name, 
       u.reg_date,  
       b.board_num,
       b.board_title,
       b.board_content
  FROM mvc_user_tbl u
     , mvc_board_tbl b
 WHERE u.user_id = b.user_id
   AND u.user_name = 'john' 
   AND b.board_content LIKE '%반복문%'
 ORDER BY u.user_id ASC;
